[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "plop\nAbout this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "interactive_plot.html",
    "href": "interactive_plot.html",
    "title": "Interactive work without a server with web assembly",
    "section": "",
    "text": "Using web-assembly, we can have python or R code executed on the fly in the browser. In quarto, this can be achieved with the quarto-live extension.\nThis is very nice as it lets you build fully interactive app without the need to host them with a server architecture (because all the computations happen on the user’s computer), which lets us host it as a static website (potentially for free, as for our github page!).\nOf course there is a downside: upon loading the page, the user’s browser will need to install all the R webassembly components and associated libraries. This generally takes around 10 to 30 seconds if you don’t have many complex libraries. Also, the execution of the R or python code is often a bit slower than what you would experience outside the web browser.\nLet’s look at a couple of examples:\nHistogram interacting with a javascript Observable input component:\n\nviewof sex_box = Inputs.checkbox(\n  [\"M\", \"F\"],\n  {\n    value: [\"M\", \"F\"],\n    label: \"Shown sexes:\",\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA more complex examples with more interactive inputs (NB: it seems that when moving the slider the image get re-computed for each intermediate value, leading to some slowness sometimes) :\n\n\n\n\n\n\n\n\n\nviewof sex_show = Inputs.radio([\"M\", \"F\"], {label: \"Sex:\",value:\"F\"})\n\nviewof year = Inputs.range([1880, 2010], {step: 10, label: \"starting year:\"})\n\nviewof n_names = Inputs.range([1, 12], {step: 1, label: \"number of top names:\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can also just have interactive R/python cells where you can write and execute code :"
  },
  {
    "objectID": "analysis.html",
    "href": "analysis.html",
    "title": "analysis",
    "section": "",
    "text": "The first 10 lines:\n\n\n\n\n\nyear\nsex\nname\nn\nprop\n\n\n\n\n1880\nF\nMary\n7065\n0.0723836\n\n\n1880\nF\nAnna\n2604\n0.0266790\n\n\n1880\nF\nEmma\n2003\n0.0205215\n\n\n1880\nF\nElizabeth\n1939\n0.0198658\n\n\n1880\nF\nMinnie\n1746\n0.0178884\n\n\n1880\nF\nMargaret\n1578\n0.0161672\n\n\n\n\n\n\n\nCode\nget_most_frequent &lt;- function(babynames, select_sex, from = 1950) {\n  most_freq &lt;- babynames |&gt;\n    filter(sex == select_sex, year &gt; from) |&gt;\n    group_by(name) |&gt;\n    summarise(average = mean(prop)) |&gt;\n    arrange(desc(average))\n    \n  return(list(\n    babynames = babynames,\n    most_frequent = most_freq,\n    sex = select_sex,\n    from = from))\n}\n\nplot_top &lt;- function(x, top = 10) {\n  topx &lt;- x$most_frequent$name[1:top]\n  \n  p &lt;- x$babynames |&gt;\n    filter(name %in% topx, sex == x$sex, year &gt; x$from) |&gt;\n    ggplot(aes(x = year, y = prop, color = name)) +\n    geom_line() +\n    scale_color_brewer(palette = \"Paired\") +\n    theme_classic()\n  \n  return(p)\n}\n\n\n\n\n\n\n\n\n\n\nFigure 1: female most frequent names\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: male most frequent names\n\n\n\n\n\nYou can look at Figure 1 or Figure 2"
  },
  {
    "objectID": "analysis.html#first-section",
    "href": "analysis.html#first-section",
    "title": "analysis",
    "section": "",
    "text": "The first 10 lines:\n\n\n\n\n\nyear\nsex\nname\nn\nprop\n\n\n\n\n1880\nF\nMary\n7065\n0.0723836\n\n\n1880\nF\nAnna\n2604\n0.0266790\n\n\n1880\nF\nEmma\n2003\n0.0205215\n\n\n1880\nF\nElizabeth\n1939\n0.0198658\n\n\n1880\nF\nMinnie\n1746\n0.0178884\n\n\n1880\nF\nMargaret\n1578\n0.0161672\n\n\n\n\n\n\n\nCode\nget_most_frequent &lt;- function(babynames, select_sex, from = 1950) {\n  most_freq &lt;- babynames |&gt;\n    filter(sex == select_sex, year &gt; from) |&gt;\n    group_by(name) |&gt;\n    summarise(average = mean(prop)) |&gt;\n    arrange(desc(average))\n    \n  return(list(\n    babynames = babynames,\n    most_frequent = most_freq,\n    sex = select_sex,\n    from = from))\n}\n\nplot_top &lt;- function(x, top = 10) {\n  topx &lt;- x$most_frequent$name[1:top]\n  \n  p &lt;- x$babynames |&gt;\n    filter(name %in% topx, sex == x$sex, year &gt; x$from) |&gt;\n    ggplot(aes(x = year, y = prop, color = name)) +\n    geom_line() +\n    scale_color_brewer(palette = \"Paired\") +\n    theme_classic()\n  \n  return(p)\n}\n\n\n\n\n\n\n\n\n\n\nFigure 1: female most frequent names\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: male most frequent names\n\n\n\n\n\nYou can look at Figure 1 or Figure 2"
  },
  {
    "objectID": "analysis.html#new-section",
    "href": "analysis.html#new-section",
    "title": "analysis",
    "section": "new section",
    "text": "new section\n\n# get most frequent girl names from 2010 onwards\nfrom_year &lt;- 2010\nmost_freq_girls &lt;- get_most_frequent(babynames, select_sex = \"F\",\n                                     from = from_year)\n\n# plot top 5 girl names\nmost_freq_girls |&gt;\n  plot_top(top = 5)\n\n# plot top 10 girl names\nmost_freq_girls |&gt;\n  plot_top(top = 10)\n\n# get top 30 girl names in a matrix\n# with names in rows and years in columns\nprop_df &lt;- babynames |&gt; \n  filter(name %in% most_freq_girls$most_frequent$name[1:30] & sex == \"F\") |&gt;\n  filter(year &gt;= from_year) |&gt; \n  select(year, name, prop) |&gt;\n  pivot_wider(names_from = year,\n              values_from = prop)\n\nprop_mat &lt;- as.matrix(prop_df[, 2:ncol(prop_df)])\nrownames(prop_mat) &lt;- prop_df$name\n\n# create heatmap\npheatmap(prop_mat, cluster_cols = FALSE, scale = \"row\")\n\n\n\n\n\n\n\n\n\n\n\n(a) Top 5\n\n\n\n\n\n\n\n\n\n\n\n(b) Top 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) Top 30\n\n\n\n\n\n\n\nFigure 3: Most popular girl names from 2010 onwards"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "quarto-tutorial",
    "section": "",
    "text": "In this project we aim to visualize the trends of the most frequently used babynames from 1880 to 2017 in the United States. We do this by:\n\nUnderstanding the different columns of the data set\nFind the top 10 most frequently used baby names in the data for:\n\ngirls\nboys\n\nPlot the yearly trend of the top 10 baby names\n\n\n\n“Baby Squirrel” by Twix is licensed under CC BY-SA 2.0 .\n\n\n1 + 1\n\n[1] 2\n\n\nthis is something"
  }
]